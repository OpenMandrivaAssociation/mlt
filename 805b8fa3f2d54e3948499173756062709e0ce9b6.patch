From 805b8fa3f2d54e3948499173756062709e0ce9b6 Mon Sep 17 00:00:00 2001
From: Dan Dennedy <dan@dennedy.org>
Date: Sat, 13 Apr 2024 12:14:58 -0700
Subject: [PATCH] fix build on older versions

---
 src/modules/avformat/common.c            |  4 ++--
 src/modules/avformat/common.h            |  6 +++---
 src/modules/avformat/consumer_avformat.c | 24 +++++++++++-----------
 src/modules/avformat/filter_avfilter.c   |  6 +++---
 src/modules/avformat/link_avfilter.c     |  8 ++++----
 src/modules/avformat/producer_avformat.c | 26 ++++++++++++------------
 6 files changed, 37 insertions(+), 37 deletions(-)

diff --git a/src/modules/avformat/common.c b/src/modules/avformat/common.c
index a595f468b..b09d15522 100644
--- a/src/modules/avformat/common.c
+++ b/src/modules/avformat/common.c
@@ -1,6 +1,6 @@
 /*
  * common.h
- * Copyright (C) 2018-2023 Meltytech, LLC
+ * Copyright (C) 2018-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -156,7 +156,7 @@ int64_t mlt_to_av_channel_layout(mlt_channel_layout layout)
     return 0;
 }
 
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
 mlt_channel_layout av_channel_layout_to_mlt(AVChannelLayout *layout)
 {
     switch (layout->u.mask) {
diff --git a/src/modules/avformat/common.h b/src/modules/avformat/common.h
index 7fc985655..0e1e28bd8 100644
--- a/src/modules/avformat/common.h
+++ b/src/modules/avformat/common.h
@@ -1,6 +1,6 @@
 /*
  * common.h
- * Copyright (C) 2018 Meltytech, LLC
+ * Copyright (C) 2018-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -25,11 +25,11 @@
 #include <libswscale/swscale.h>
 
 #define MLT_AVFILTER_SWS_FLAGS "bicubic+accurate_rnd+full_chroma_int+full_chroma_inp"
-#define HAVE_FFMPEG_CH_LAYOUT (LIBAVUTIL_VERSION_MAJOR > 57)
+#define HAVE_FFMPEG_CH_LAYOUT (LIBAVUTIL_VERSION_MAJOR >= 59)
 
 int mlt_to_av_sample_format(mlt_audio_format format);
 int64_t mlt_to_av_channel_layout(mlt_channel_layout layout);
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
 mlt_channel_layout av_channel_layout_to_mlt(AVChannelLayout *layout);
 #else
 mlt_channel_layout av_channel_layout_to_mlt(int64_t layout);
diff --git a/src/modules/avformat/consumer_avformat.c b/src/modules/avformat/consumer_avformat.c
index 676bbcf92..6b84dd133 100644
--- a/src/modules/avformat/consumer_avformat.c
+++ b/src/modules/avformat/consumer_avformat.c
@@ -1,6 +1,6 @@
 /*
  * consumer_avformat.c -- an encoder based on avformat
- * Copyright (C) 2003-2023 Meltytech, LLC
+ * Copyright (C) 2003-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -720,7 +720,7 @@ static AVStream *add_audio_stream(mlt_consumer consumer,
                                   const AVCodec *codec,
                                   AVCodecContext **codec_context,
                                   int channels,
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                                   AVChannelLayout *channel_layout
 #else
                                   int64_t channel_layout
@@ -745,7 +745,7 @@ static AVStream *add_audio_stream(mlt_consumer consumer,
         c->codec_id = codec->id;
         c->codec_type = AVMEDIA_TYPE_AUDIO;
         c->sample_fmt = pick_sample_fmt(properties, codec);
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         av_channel_layout_copy(&c->ch_layout, channel_layout);
 #else
         c->channel_layout = channel_layout;
@@ -792,7 +792,7 @@ static AVStream *add_audio_stream(mlt_consumer consumer,
         // Set parameters controlled by MLT
         c->sample_rate = mlt_properties_get_int(properties, "frequency");
         st->time_base = (AVRational){1, c->sample_rate};
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         c->ch_layout.nb_channels = channels;
 #else
         c->channels = channels;
@@ -1208,7 +1208,7 @@ typedef struct
     size_t size;
 } buffer_t;
 
-#ifndef HAVE_FFMPEG_CH_LAYOUT
+#if !HAVE_FFMPEG_CH_LAYOUT
 static int mlt_write(void *h, uint8_t *buf, int size)
 {
     mlt_properties properties = (mlt_properties) h;
@@ -1310,7 +1310,7 @@ static int encode_audio(encode_ctx_t *ctx)
             ctx->audio_avframe->pts = ctx->sample_count[i];
             ctx->sample_count[i] += ctx->audio_avframe->nb_samples;
             avcodec_fill_audio_frame(ctx->audio_avframe,
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                                      codec->ch_layout.nb_channels,
 #else
                                      codec->channels,
@@ -1390,7 +1390,7 @@ static int encode_audio(encode_ctx_t *ctx)
             ctx->audio_avframe->pts = ctx->sample_count[i];
             ctx->sample_count[i] += ctx->audio_avframe->nb_samples;
             avcodec_fill_audio_frame(ctx->audio_avframe,
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                                      codec->ch_layout.nb_channels,
 #else
                                      codec->channels,
@@ -1648,7 +1648,7 @@ static void *consumer_thread(void *arg)
     }
     if (enc_ctx->audio_codec_id != AV_CODEC_ID_NONE) {
         int is_multi = 0;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         AVChannelLayout ch_layout;
 #else
         int64_t ch_layout;
@@ -1662,7 +1662,7 @@ static void *consumer_thread(void *arg)
             if (j) {
                 is_multi = 1;
                 enc_ctx->total_channels += j;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                 av_channel_layout_default(&ch_layout, j);
                 enc_ctx->audio_st[i] = add_audio_stream(consumer,
                                                         enc_ctx->oc,
@@ -1690,7 +1690,7 @@ static void *consumer_thread(void *arg)
                 || mlt_audio_channel_layout_channels(layout) != enc_ctx->channels) {
                 layout = mlt_audio_channel_layout_default(enc_ctx->channels);
             }
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
             av_channel_layout_from_mask(&ch_layout, mlt_to_av_channel_layout(layout));
             enc_ctx->audio_st[0] = add_audio_stream(consumer,
                                                     enc_ctx->oc,
@@ -1771,7 +1771,7 @@ static void *consumer_thread(void *arg)
 
         // Setup custom I/O if redirecting
         if (mlt_properties_get_int(properties, "redirect")) {
-#ifndef HAVE_FFMPEG_CH_LAYOUT
+#if !HAVE_FFMPEG_CH_LAYOUT
             int buffer_size = 32768;
             unsigned char *buffer = av_malloc(buffer_size);
             AVIOContext *io
@@ -1834,7 +1834,7 @@ static void *consumer_thread(void *arg)
             AVCodecContext *c = enc_ctx->acodec_ctx[0];
             enc_ctx->audio_avframe->format = c->sample_fmt;
             enc_ctx->audio_avframe->nb_samples = enc_ctx->audio_input_frame_size;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
             av_channel_layout_copy(&enc_ctx->audio_avframe->ch_layout, &c->ch_layout);
 #else
             enc_ctx->audio_avframe->channel_layout = c->channel_layout;
diff --git a/src/modules/avformat/filter_avfilter.c b/src/modules/avformat/filter_avfilter.c
index 8616dc2c6..06bc8101f 100644
--- a/src/modules/avformat/filter_avfilter.c
+++ b/src/modules/avformat/filter_avfilter.c
@@ -1,6 +1,6 @@
 /*
  * filter_avfilter.c -- provide various filters based on libavfilter
- * Copyright (C) 2016-2022 Meltytech, LLC
+ * Copyright (C) 2016-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -694,7 +694,7 @@ static int filter_get_audio(mlt_frame frame,
                                                 *channels);
         pdata->avinframe->sample_rate = *frequency;
         pdata->avinframe->format = mlt_to_av_sample_format(*format);
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         av_channel_layout_from_mask(&pdata->avinframe->ch_layout, mlt_to_av_channel_layout(layout));
 #else
         pdata->avinframe->channel_layout = mlt_to_av_channel_layout(layout);
@@ -729,7 +729,7 @@ static int filter_get_audio(mlt_frame frame,
         }
 
         // Sanity check the output frame
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         if (*channels != pdata->avoutframe->ch_layout.nb_channels
 #else
         if (*channels != pdata->avoutframe->channels
diff --git a/src/modules/avformat/link_avfilter.c b/src/modules/avformat/link_avfilter.c
index 38b7f8683..e1106191c 100644
--- a/src/modules/avformat/link_avfilter.c
+++ b/src/modules/avformat/link_avfilter.c
@@ -1,6 +1,6 @@
 /*
  * link_avfilter.c -- provide various links based on libavfilter
- * Copyright (C) 2023 Meltytech, LLC
+ * Copyright (C) 2023-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -780,7 +780,7 @@ static int link_get_audio(mlt_frame frame,
         int inbufsize = mlt_audio_format_size(in.format, in.samples, in.channels);
         pdata->avinframe->sample_rate = in.frequency;
         pdata->avinframe->format = mlt_to_av_sample_format(in.format);
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         av_channel_layout_from_mask(&pdata->avinframe->ch_layout, mlt_to_av_channel_layout(layout));
 #else
         pdata->avinframe->channel_layout = mlt_to_av_channel_layout(layout);
@@ -820,7 +820,7 @@ static int link_get_audio(mlt_frame frame,
         }
 
         // Sanity check the output frame
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
         if (*channels != pdata->avoutframe->ch_layout.nb_channels
 #else
         if (*channels != pdata->avoutframe->channels
@@ -830,7 +830,7 @@ static int link_get_audio(mlt_frame frame,
             mlt_log_error(self,
                           "Unexpected return format c %d->%d\tf %d->%d\tf %d->%d\n",
                           *channels,
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                           pdata->avoutframe->ch_layout.nb_channels,
 #else
                           pdata->avoutframe->channels,
diff --git a/src/modules/avformat/producer_avformat.c b/src/modules/avformat/producer_avformat.c
index 41e5d96de..f51a7e6d9 100644
--- a/src/modules/avformat/producer_avformat.c
+++ b/src/modules/avformat/producer_avformat.c
@@ -1,6 +1,6 @@
 /*
  * producer_avformat.c -- avformat producer
- * Copyright (C) 2003-2023 Meltytech, LLC
+ * Copyright (C) 2003-2024 Meltytech, LLC
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -506,7 +506,7 @@ static mlt_properties find_default_streams(producer_avformat self)
             }
             break;
         case AVMEDIA_TYPE_AUDIO:
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
             if (!codec_params->ch_layout.nb_channels)
 #else
             if (!codec_params->channels)
@@ -523,7 +523,7 @@ static mlt_properties find_default_streams(producer_avformat self)
             mlt_properties_set_int(meta_media, key, codec_params->sample_rate);
             snprintf(key, sizeof(key), "meta.media.%u.codec.channels", i);
             mlt_channel_layout mlt_layout = mlt_channel_independent;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
             mlt_properties_set_int(meta_media, key, codec_params->ch_layout.nb_channels);
             if (av_channel_layout_check(&codec_params->ch_layout)) {
                 mlt_layout = av_channel_layout_to_mlt(&codec_params->ch_layout);
@@ -1441,7 +1441,7 @@ static void get_audio_streams_info(producer_avformat self)
             if (codec && avcodec_open2(codec_context, codec, NULL) >= 0) {
                 self->audio_streams++;
                 self->audio_max_stream = i;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                 self->total_channels += codec_params->ch_layout.nb_channels;
                 if (codec_params->ch_layout.nb_channels > self->max_channel)
                     self->max_channel = codec_params->ch_layout.nb_channels;
@@ -2342,7 +2342,7 @@ static int producer_get_image(mlt_frame frame,
 
                 // Decode the image
                 if (must_decode || int_position >= req_position || !self->pkt.data) {
-#ifndef HAVE_FFMPEG_CH_LAYOUT
+#if !HAVE_FFMPEG_CH_LAYOUT
                     self->video_codec->reordered_opaque = int_position;
 #endif
                     if (int_position >= req_position)
@@ -2397,7 +2397,7 @@ static int producer_get_image(mlt_frame frame,
 
                 if (got_picture) {
                     // Get position of reordered frame
-#ifndef HAVE_FFMPEG_CH_LAYOUT
+#if !HAVE_FFMPEG_CH_LAYOUT
                     int_position = self->video_frame->reordered_opaque;
 #endif
                     pts = best_pts(self, self->video_frame->pts, self->video_frame->pkt_dts);
@@ -3109,7 +3109,7 @@ static int decode_audio(producer_avformat self,
 
     // Obtain the audio buffers
     uint8_t *audio_buffer = self->audio_buffer[index];
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
     int channels = codec_context->ch_layout.nb_channels;
 #else
     int channels = codec_context->channels;
@@ -3146,7 +3146,7 @@ static int decode_audio(producer_avformat self,
             } else {
                 // Figure out how many samples will be needed after resampling
                 int convert_samples = self->audio_frame->nb_samples;
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                 channels = codec_context->ch_layout.nb_channels;
 #else
                 channels = codec_context->channels;
@@ -3347,7 +3347,7 @@ static int producer_get_audio(mlt_frame frame,
         AVCodecContext *codec_context = self->audio_codec[index];
 
         if (codec_context && !self->audio_buffer[index]) {
-#ifndef HAVE_FFMPEG_CH_LAYOUT
+#if !HAVE_FFMPEG_CH_LAYOUT
             if (self->audio_index != INT_MAX
                 && !mlt_properties_get(MLT_PRODUCER_PROPERTIES(self->parent),
                                        "request_channel_layout"))
@@ -3457,7 +3457,7 @@ static int producer_get_audio(mlt_frame frame,
             *frequency = codec_ctx->sample_rate;
             *format = pick_audio_format(codec_ctx->sample_fmt);
             sizeof_sample = sample_bytes(codec_ctx);
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
             *channels = codec_ctx->ch_layout.nb_channels;
             if (av_channel_layout_check(&codec_ctx->ch_layout)) {
                 mlt_layout = av_channel_layout_to_mlt(&codec_ctx->ch_layout);
@@ -3501,7 +3501,7 @@ static int producer_get_audio(mlt_frame frame,
             for (i = 0; i < *samples; i++) {
                 for (index = 0; index < index_max; index++)
                     if (self->audio_codec[index]) {
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                         int current_channels = self->audio_codec[index]->ch_layout.nb_channels;
 #else
                         int current_channels = self->audio_codec[index]->channels;
@@ -3514,7 +3514,7 @@ static int producer_get_audio(mlt_frame frame,
             }
             for (index = 0; index < index_max; index++)
                 if (self->audio_codec[index] && self->audio_used[index] >= *samples) {
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                     int current_channels = self->audio_codec[index]->ch_layout.nb_channels;
 #else
                     int current_channels = self->audio_codec[index]->channels;
@@ -3781,7 +3781,7 @@ static void producer_set_up_audio(producer_avformat self, mlt_frame frame)
                                self->audio_codec[index]->sample_rate);
         mlt_properties_set_int(frame_properties,
                                "audio_channels",
-#ifdef HAVE_FFMPEG_CH_LAYOUT
+#if HAVE_FFMPEG_CH_LAYOUT
                                self->audio_codec[index]->ch_layout.nb_channels);
 #else
                                self->audio_codec[index]->channels);
